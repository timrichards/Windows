                parentNode.BackColor = UtilColorcode.ContainsSolitaryBG;


                Util.Assert(99900,
                    (parentNode.ForeColor == UtilColorcode.Transparent) ==
                    (null == parentNode.NodeDatum.LVitem));

                var a = parentNode.ForeColor == UtilColorcode.Transparent;
                var b = null == parentNode.NodeDatum.LVitem;

                Util.Assert(99900, a == b);


                if (UtilColorcode.Transparent == parentNode.ForeColor)
                {
                    Util.Assert(99900, null == parentNode.NodeDatum.LVitem);
                    parentNode.ForeColor = UtilColorcode.Solitary;
                }
                else
                {
                    Util.Assert(99593, null != parentNode.NodeDatum.LVitem);
                    Util.Assert(99594, UtilColorcode.Solitary == parentNode.ForeColor);
                }

                Util.Assert(99594, new[] { UtilColorcode.Solitary, UtilColorcode.Transparent }.Contains(parentNode.ForeColor));

                parentNode.ForeColor = UtilColorcode.Solitary;
                parentNode = parentNode.Parent;





        static void MarkSolitaryParentsAsSolitary(LocalTreeNode treeNode)
        {
            Util.Assert(99974, UtilColorcode.Transparent == treeNode.ForeColor);
            treeNode.ForeColor = UtilColorcode.Solitary;

            LocalTreeNode parentNode = treeNode.Parent;

            while (null != parentNode)
            {
                parentNode.BackColor = UtilColorcode.ContainsSolitaryBG;

                Util.Assert(99900,
                    (parentNode.ForeColor == UtilColorcode.Transparent) ==
                    (null == parentNode.NodeDatum.LVitem));

                parentNode.ForeColor = UtilColorcode.Solitary;
                parentNode = parentNode.Parent;
            }
        }





using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;

namespace DoubleFile
{
    partial class LocalTV
    {
        internal static void
            AllFileHashes_AddRef(CancellationTokenSource cts = null)
        {
            if (0 < _nAllFileHashes_refCount++)
            {
                while (null != _cts)    // hold the caller while building so as not to signal built
                    Util.Block(50);

                return;
            }

            var stopwatch = Stopwatch.StartNew();

            _cts = cts ?? new CancellationTokenSource();
            Setup_AllFileHashes_Scratch(RootNodes);
            _cts = null;
            stopwatch.Stop();
            Util.WriteLine("Setup_AllFileHashes_Scratch " + stopwatch.ElapsedMilliseconds / 1000d + " seconds.");
#if (DEBUG)
#endif
        }

        internal static void
            AllFileHashes_DropRef()
        {
            Util.Assert(99614, 0 < _nAllFileHashes_refCount);

            if (0 < --_nAllFileHashes_refCount)
                return;

            Cleanup_AllFileHashes_Scratch(RootNodes);
        }

        static IReadOnlyList<int>
            Setup_AllFileHashes_Scratch(IReadOnlyList<LocalTreeNode> nodes, bool bStart = true)
        {
            var lsAllFilesHashes = new List<int> { };

            foreach (var treeNode in nodes)
            {
                if (_cts.IsCancellationRequested)
                    return new int[0];

                if (false == bStart)
                    lsAllFilesHashes.AddRange(treeNode.NodeDatum.Hashes_FilesHere);

                if (0 == (treeNode.Nodes?.Count ?? 0))
                {
                    treeNode.NodeDatum.Hashes_SubnodeFiles_Scratch = new int[0];
                    continue;
                }

                treeNode.NodeDatum.Hashes_SubnodeFiles_Scratch =
                    Setup_AllFileHashes_Scratch(treeNode.Nodes, bStart: false)              // recurse
                    .OrderBy(n => n)
                    .Distinct()
                    .ToList();

                if (false == bStart)
                    lsAllFilesHashes.AddRange(treeNode.NodeDatum.Hashes_SubnodeFiles_Scratch);
            }

            return lsAllFilesHashes;
        }

        static void
            Cleanup_AllFileHashes_Scratch(IReadOnlyList<LocalTreeNode> nodes)
        {
            if (null == nodes)
                return;

            foreach (var treeNode in nodes)
            {
                treeNode.NodeDatum.Hashes_SubnodeFiles_Scratch = null;
                Cleanup_AllFileHashes_Scratch(treeNode.Nodes);                 // recurse
            }
        }

        static CancellationTokenSource
            _cts = null;
        static int
            _nAllFileHashes_refCount = 0;
    }
}
