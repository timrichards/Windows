- I want to delete this volume. Please back up all files that have only one other copy or fewer.
	- this drive died: what files did I lose?
	- Colorcode folders that have files with one other copy
	- warn if 4K
	- warn faux checksum, noting the added certainty of cloned folders though
- restore a lost drive's original folder structure given that all its files are duped in various locations
- folders like Recycle Bin get in the way. Should be able to exclude them.
	- and rebuild with bindings just like the old days without resetting the view.
- Allow copy text in edit listing file dialog for dimmed source path
- overlay
	- put the AllowSubsequentProcess() functionality back in for when listings were saved
	- main window needs to be in front
	- remove modal thread dark window
	- do not allow windows to maximize
	- esc key doesn't close the msgbox when other window activated - good
	- enter key doesn't do anything until you click on msg box itself. Good.
- Tree list slider does not always go to root; and skips to root: try a search to subfolder then nav up. It also loses the deep node.
	slider is skipping desired location
- Clones don't sync to folder detail updated in extra window.
- Clones sorting: remove size labels and enable 3-mode sorting
	- 4-mode: sort by color code
- Scrollviewer for detail view
- Add folder name to suffix title Tree List: My Documents; Files in Folder: My Documents; Folders Here: My Documents; etc.
- change drive letter did not change one line and screwed up culling, which is fixed. do a check for [A-Z}:\ when verifying the file.
	- fix the file
- Option to show drive label and model/serial in Volume text (Nickname)
- binding errors only evidence on extra windows
	- SelectedItem binding not found on Detail Datagrids: BindingExpression path error: 'SelectedItem' property not found on 'object' ''LV_VolumeDetailVM' (HashCode=47281521)'. BindingExpression:Path=SelectedItem; DataItem='LV_VolumeDetailVM' (HashCode=47281521); target element is 'DataGrid' (Name='formLV_Volume'); target property is 'SelectedItem' (type 'Object')
- Application.Current.MainWindow is only accessible on the main UI thread
- PresentationCore.dll: FormatException; InvalidCastException; ArgumentException (see output window)
- ditch duplicates view and expand files list for that
	- duplicates view should have same fs info ("lv line knColLengthLV") as the Files view and col differences should be red
- sort search results by result; breakout by path; etc.
- A folder is near to being a clone: restore it using dupe files found in the would-be clones
- If I were to remove all but three or four dupes from all non-clones, how much space would I recoup on this volume?

- option to store backups in a compressed archive with its own .DFL record
	- function to explore archives and saved a .DFL for each one
- Treemap selection resets for neighbor folders
- go about reducing code metrics: class coupling; cyclometric complexity.
- SelectedItem could probably go in ListViewVM_Base<>
- see what happens when you threadmake the treeselect events
- This folder has no exact copy: so please itemize in a report what the exact differences are to the nearest copy.
	- Show the global folder list which is ranked by similar neighbors; select this folder.
	- Allow a list of important files and directories to watch, with alerts; links; etc.:
		- Invert the exclusive principle. Start inclusive, not with an ignore list.
	- Folders and files that are missing; or that are different.
	- Invert the size matters principle: some of the most important files may go unnoticed: just a drop in the bucket.
- checkbox and button on lists: turn off auto-sync to current treenode, sync now button
	- Sync To button in tree view
	- allow two different file windows to point to two different folders: each new folder window should have its own children
	- dupe vm event alerts: static vm internal counter or static transmit
- script source instead of text file for clones and solitary at this folder
	- generate script app for when you get around to plugging in the drive which deletes all the files you want
	- file management: these generated script apps strategize consolidating and space saving via separate steps
- nodeParent = new Node(strParent, _nLineNo, 0, 0, null, _rootNode)
- Deserialize: can't seem to add the unsaved listing to the project LV
- treemap doesn't always draw when zoomed into a folder with many files, mismatching proper user selection rect
- treemap still selects the tooltip when closing extra window.
- GoTo file only works with file list open
	- Detail doesn't listen for selected file change because item sel occurs in file list.
- Click OK on a dialog and Double File disappears behind another app. -fix example: end of save listings it comes to front.
- Allow a notes field
- Allow rescan of drive, with history difference, or allow copying values of already saved to the new one
- Allow opening values of listing file that failed scanning
- compare mode - how is this folder different from that one besides looking at the details: show missing/different file.
- A 64 bit hash has 1 chance in 18 quintillion. Do collision tests: e.g. run SHA1 against MD5. Put statistics under Advanced.
	- last modified time as part of comparison; or notification: hash equal but mod times are different
	- wolfram-alpha front-end; curate; data -> query language: what state are my backups in? What are the best queries to bring forward?
	- compare the 4K vs 128K correlations to see what they caught. - quick see: nFolderCount1pt0 vs nFolderCount2
- Filtering user control header for tree list; tree view; files; search; duplicates: like search but restrict the view
- open project; nav save listings; cancel; nav nav; complete save listings; nav explorer create; cancel: should project page.
- show messagbox title
- extra window resizes when closing when a tooltip is up
- alt-tab from an extra window cycles to the main window
- couldn't move an extra window. Fixed with not bringing tooltip to front now? 9/2/15
- tooltip doesn't darken: no big deal.
- Message box option to not repeat, with loc dictionary and 1 minute timer
	- that other no-repeat code may prevent user from seeing message.
	- Message log window for all repeats etc. Perhaps subitems for repeated in-a-row not skipped messages.
	- log file, and consoldiate that with ProjectFile.
- first tree view item is bold and the wrong forecolors, incl highlighted - treeview shouldn't have a selected item. app activated?
- file list 0-length files assert at tuple.Item2.First(strFile =>
- esc key doesn't close Edit Listing window - I like it
- can you disable Minimize in the Alt-Space popup menu? It results in a no-op: not a big deal.
- shouldn't be impossible to find 2 year old jpg of eq settings
- foreach over IList
- beating on search causes 1 in 5 no appear
- backspace key is just like any browser: history back button
- naving to search directly, invoking SDL, leaves SDL completed open but then does not focus on input text box
- repeatedly scrolling to the end and cycling the Variance pages will eat up memory.
- corner case: pounding search will increase memory usage
- Assert box offset when app window partly off screen
- Could remove ?? true: false != null
- LocalTreeNode(TabledString<Tabled_Folders> strContent) is never called - keep it around. string passed in gets converted
- Smells:
	- ISaveDirListingsStatus.Status ignores WinProgress.WithWinProgress lambda 
	- WinProject doesn't test its weak reference which is understandable
- if (null == tuple.Item3.NodeDatum.TreemapFiles)     // TODO: Why would this be null?
- same volume / solitary red forecolors are too similar
- object.MemberwiseClone()
- check and remove Linq/enumeration for arrays - prob OK: tests for ICollection
- can LVitem_base be TabledString?
- new LVitem_SearchVM is not created on the main thread
- AsParallel() seems to work with LVitem_SearchVM: OrderBy in FileDictionary
- System dialogs are only currently on top of a modal window in Go(): the main loop in GoA() won't exit them properly - check thread
- Show parent folder\this folder in rest of path
- Look for ToArray(): LocalTreeNode etc OK as array for Length.
- string CompareTo() .Equals StringComparison.InvariantCultureIgnoreCase ToLower
	- todo: == != .Equals
	- StringComparison.OrdinalIgnoreCase is for paths
	- use string.Compare. avoid using the String.CompareTo instance methods because none of the overloads takes a StringComparison
	- https://msdn.microsoft.com/en-us/library/Cc165449.aspx
	- Ordinal is the fastest way to compare two strings.

- C# has this base override is null problem: (null != base.Nodes) is always true even when null
- C# has this overload/override problem: the parameter can be optional here so who do you call?
	Can set up an ambiguous call which compiled:
		internal ProgressOverlay
            ShowOverlay(LocalModernWindowBase window = null) { _window = window; return ShowOverlay(); }
        ProgressOverlay ShowOverlay()
- The todo list is not read-only while debugging.
	- You may be able to save an edit and continue source file even though locked and running.
- You can set a breakpoint condition false == new System.Diagnostics.StackTrace().ToString().Contains("AddToTree")
- You can go to type definition on var right-click
- Use WinProgress as a model for simulating factory create: use a weak reference and assert in constructor
	- factory create would be nice for e.g. WinProgress but then you can't use variable initializer
- Use SearchListings as a model for derived class constructor
	- Derived class constructors can't assign to readonly protected member vars
	- Nor can they assign to base class { get; }, which makes such useless in abstract class?
- Abstract and base statics are not unique in each derived class. Generic base statics are.
- Parameterless base constructors are automatically called, and first
- Aggregate returns seed on empty enumerable
- AsParallel can significantly slow down a query: e.g. IsDupeExtra()
- good: string concat still occurs after nullable type is null: a + b?.ToString() + c still gives a + c		11/3/15

- directory listings preserve display case, which is irrespective: NTFS usage is always case insensitive.
	Regex is case sensitive because the regex iteself might be: user can inline case-insensitve.
- Rename set methods to MethodSet(): hard to find: e.g. AbortSet() in WinProgress
	- check properties that are only supposed to be set once to true: make them Set methods
- HashTuple: found 1.5M unique files

- New Listing File dialog flashes when system choose folder dialog is shown
- tool tip to tree map title bar area
- go to button in tree map
- save to both V1 and latest V as 2 files (in debug); convert V1 and compare to latest: for practice in consistency
- rollover highlight project image button text
- Tree list is not updating from treemap selection - or maybe it's a drill down - didn't respond to tree map drill up. Did.
- Allow sorting the tree view by drive letter, etc.
- Good that tree does not autoupdate: extra window. Allow filter by volume type, for example.
- Unimplemented code in DriveSerialStatic.cs which tries to scan all drives to find model # - not an issue: serial # usb is

- Allow method chaining: return this instead of void
- hash version is not shown to the user.
- should the 2-pass listing save go out to the fs twice or just cache all the filenames?
- Remove WidthListingFile and redo the ListingFile setter to internal - same goes for progress dialog though
- replace properties with converters
- minimize progress/messagebox to task bar?
- Automatically add Width properties from LV base - not really worth making an expando out of it

- set hover bg same as bg in project lv for group etc
- allow user toggle showing free space
- UX tree map free space
- resource all stringets; en-us etc.
- auto layout? save layout?
- Apply async/await
- Who collaborates/reviews? Who wants to learn from this code base?
- Research runtime asserts vs unit testing online. Throw exceptions instead, perhaps.
	NUnit: replace MboxStatic assert with [TestMethod] and Assert.AreEqual, etc.
- services, decouple: Unity frameork: rewrite in Node/Angular; C++; Linux etc. Start these with unit testing.
- what C# features don't translate well to other languages like C++? is operator?
- neither is nor as are reflection. as is 20x slower though. p. 123
- Join() vs Block() - Join() completely locks up the Dispatcher? Does Block() wait At PushFrame() like a traffic cop?

- Count property is very slow on Dictionary even though it's an ICollection. List and stack to be trusted?
- Replace First() with FirstOnlyAssert()
- AsEnumerable() in FileDictionary cut 60MB off and did not take any time to make.
- TotalMilliseconds gotcha
- look for 0 ==    > 0 <   == 0   < 0 >  Count property;   etc.
	The Length property is guaranteed to be a O(1) operation.
	several types which support O(1) length lookup like ICollection<T> via a Count property.
- Convert.ToInt32 etc: use Util
- nullables should be type nullable = null; not var nullable = default(type);
- string.IsNullOrWhiteSpace has completely replaced IsNullOrEmpty 7/7/15
- Make the array[] a ReadOnlyCollection using Array.AsReadOnly<T>(T[] array). This method is an O(1) operation.
- check Count usage in loops
- replace .Cast with (ICollection<>)
- replace IEnumerable with ICollection where possible
- replace null member vars like Thread with instances so no need to test for null
- 7zr.exe is the archiver of choice. It is in the LZMA SDK found at http://www.7-zip.org/a/lzma920.tar.bz2

Coding purpose:
- Built a reusable platform to rapidly create apps: focus on the business logic
- Change-managed Windows.Forms.ListView app into WPF app with MVVM DataGrids
- Implemented modal (does not use WinForms ShowDialog)
- Implemented 340 release mode asserts (does not depend on Debug.Assert)
- Optimized memory; DRY; standards; maintainability; speed O(1) where possible

Skills used:
- WinMerge; GitHub; Spy++; JetBrains dotMemory and dotTrace; Visual Studio 2015
- Reactive Extensions; subject-observer
- Weak reference; try-catch; extension methods; closures; C# 6; Linq to objects; generics
- External process (7-zip.exe); Native methods (PInvoke); bit shifting; datum ints; binary search
- Threading; parallel; dispatcher frame
- System.Windows.Interactivity; triggers; templates; dependency properties; DRY xaml in styles

Specific code areas:
- UX surrounding compressed project file holding nested directory listings and metadata
- Metro/modern UI; consistent page-by-page, based on M:UI
- Progress UI; String table; Isolated Storage
- Bespoke UX: tree list (vs. tree view); tree map (tool tip; animation; drill-down hit testing)
- Regex search; duplicate files and folders; Nearest folders; studied ANOVA; LSH; MinHash; Jaccard
- Fast long-path large fetch native directory listings
- Fast 1 MB sample faux checksum per file on your drive (512K from head; 512K from tail)
- 2nd assembly, view of Double File: simplified view for current drive, without checksum
- Began without a System.Windows.Controls reference: now it does not reference System.Windows.Forms

	On the surface, Double File may look like WinDirStat (from which it borrows code) or similar graphical drive utilization utilities: e.g. the second assembly 'Volume Treemap'. However, Double File is project-based: it saves file checksums in directory listings you store locally. It facilitates planning and transitioning between computers and operating systems: snapshot your drive and safely archive it.
	Listings can be searched when volumes are off site. Can read any volume mounted in Windows Explorer, including Linux and Mac volumes. Supports long path names.
- WinForms application: http://sourceforge.net/projects/searchdirlists/
- Source repository: http://github.com/timrichards/Windows

99577

99830 block is reserved: do not alert LocalOnNext. Next: 99837 on down
99570 next low assert
