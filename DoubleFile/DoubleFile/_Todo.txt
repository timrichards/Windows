- first tree view item is bold and the wrong forecolors, incl highlighted - treeview shouldn't have a selected item.
- tree map doesn't always show up at all; slow calc etc
- large file tree map blacks out switching between items 1 and 2 - item 1 has bitmap size of 1152: loaded too slow for it.
- wpf treemap
- Todo: save volume group.\nTodo: save include y/n
- fix slider in tree list

- When VolTreeMap exits it will crash any other copies of it up
- tooltip stays up when moving app window
- background progress: saving project doesn't have to tie up the app.
- Could remove ?? true: false != null
- LocalTreeNode(TabledString<Tabled_Folders> strContent) is never called - keep it around. string passed in gets converted
- Smells:
	- ISaveDirListingsStatus.Status ignores WinProgress.WithWinProgress lambda 
	- WinProject doesn't test its weak reference which is understandable
- SelectedItem binding not found on Detail Datagrids: BindingExpression path error: 'SelectedItem' property not found on 'object' ''LV_VolumeDetailVM' (HashCode=47281521)'. BindingExpression:Path=SelectedItem; DataItem='LV_VolumeDetailVM' (HashCode=47281521); target element is 'DataGrid' (Name='formLV_Volume'); target property is 'SelectedItem' (type 'Object')
- if (null == tuple.Item3.NodeDatum.TreeMapFiles)     // TODO: Why would this be null?
- SDL small then check outer folder score: 0 0 0
- rename "tuple" in TreeSelect clients
- same volume / solitary red forecolors are too similar
- WinFolderListVM has a Dispose method that's never called.
- object.MemberwiseClone()
- NumCols_ = 0 for some Wins
- check and remove Linq/enumeration for arrays - prob OK: tests for ICollection
- sort search results by result; breakout by path; etc.
- can LVitem_base be TabledString?
- Do all non-generic WeakReferences have to be that way?
- new LVitem_SearchVM is not created on the main thread
- AsParallel() seems to work with LVitem_SearchVM: OrderBy in FileDictionary
- Weighted small succeeded 7/15/15
- System dialogs are only currently on top of a modal window in Go(): the main loop in GoA() won't exit them properly - check thread
- Show parent folder\this folder in rest of path
- Look for ToArray(): LocalTreeNode etc OK as array for Length.
- string CompareTo() .Equals StringComparison.InvariantCultureIgnoreCase ToLower
- Application.Current.MainWindow can be LocalMbox (when exiting app)
- The todo list is not read-only while debugging.
- You can go to type definition on var right-click
- Use WinProgress as a model for simulating factory create: use a weak reference and assert in constructor
	- factory create would be nice for e.g. WinProgress but then you can't use variable initializer
- Use SearchListings as a model for derived class constructor
	- Derived class constructors can't assign to readonly protected member vars
- directory listings preserve display case, which is irrespective: NTFS usage is always case insensitive.
	Regex is case sensitive because the regex iteself might be: user can inline case-insensitve.
- Rename set methods to MethodSet(): hard to find: e.g. AbortSet() in WinProgress
	- check properties that are only supposed to be set once to true: make them Set methods

- Eliminate no files here + just one subfolder from folder score (but why's it different?)
	- Why does a folder with the same # items as subfolder have a different folder score? (i.e. no files here)
	- why does e.g. monkey_house have a nFolderScorer of 0?
- What is the distribution of sums of "random" hash folder score?
- Why are some folders white? Why do some folders not say they're duplicated?
- PresentationCore.dll: FormatException; InvalidCastException; ArgumentException (see output window)
- allow moving the window when darkened
- New Listing File dialog flashes when system choose folder dialog is shown
- tool tip to tree map title bar area
- go to button in tree map
- save to both V1 and latest V as 2 files (in debug); convert V1 and compare to latest: for practice in consistency
- rollover highlight project image button text
- Click OK on a dialog and Double File disappears behind another app. -fix example: end of save listings it comes to front.
- Allow a notes field
- Allow rescan of drive, with history difference, or allow copying values of already saved to the new one
- Allow opening values of listing file that failed scanning
- compare mode - how is this folder different from that one besides looking at the details: show missing/different file.
- This folder has no exact copy: so please itemize in a report what the exact differences are to the nearest copy.
	- Show the global folder list which is ranked by similar neighbors; select this folder.
	- Allow a list of important files and directories to watch, with alerts; links; etc.:
		- Invert the exclusive principle. Start inclusive, not with an ignore list.
	- Folders and files that are missing; or that are different.
	- Invert the size matters principle: some of the most important files may go unnoticed: just a drop in the bucket.
	- Restore the ignore list: nobody cares about the Windows or Program Files directories. Don't make moron reports.
- A 64 bit hash has 1 chance in 18 quintillion. Do collision tests: e.g. run SHA1 against MD5. Put statistics under Advanced.
- last modified time as part of comparison; or notification: hash equal but mod times are different
- wolfram-alpha front-end; curate; data -> query language: what state are my backups in? What are the best queries to bring forward?
- compare the 4K vs 128K correlations to see what they caught. - quick see: nFolderCount1pt0 vs nFolderCount2
- Add folder name to suffix title Tree List: My Documents; Files in Folder: My Documents; Folders Here: My Documents; etc.
- Tree list is not updating from treemap selection - or maybe it's a drill down - didn't respond to tree map drill up. Did.
- Option to show drive label and model/serial in Volume text (Nickname)
- Allow sorting the tree view by drive letter, etc.
- Good that tree does not autoupdate: extra window. Allow filter by volume type, for example.
- allow two different file windows to point to two different folders: each new folder window should have its own children
- dupe vm event alerts: static vm internal counter or static transmit
- Sync To button in tree view
- Filtering user control header for tree list; tree view; files; search; duplicates: like search but restrict the view
- open project; nav save listings; cancel; nav nav; complete save listings; nav explorer create; cancel: should project page.
- show messagbox title
- Unimplemented code in DriveSerialStatic.cs which tries to scan all drives to find model # - not an issue: serial # usb is

- Allow method chaining: return this instead of void
- hash version is not shown to the user.
- should the 2-pass listing save go out to the fs twice or just cache all the filenames?
- Remove WidthListingFile and redo the ListingFile setter to internal - same goes for progress dialog though
- replace properties with converters
- replace DarkWindow with flyouts
- minimize progress/messagebox to task bar?
- Automatically add Width properties from LV base - not really worth making an expando out of it

- vertical scrollbar: window height clips volumes lv
- set hover bg same as bg in project lv for group etc
- allow user toggle showing free space
- UX tree map free space
- resource all stringets; en-us etc.
- auto layout? save layout?
- Apply async/await
- Who collaborates/reviews? Who wants to learn from this code base?
- Research runtime asserts vs unit testing online. Throw exceptions instead, perhaps.
	NUnit: replace MboxStatic assert with [TestMethod] and Assert.AreEqual, etc.
- services, decouple: Unity frameork: rewrite in Node/Angular; C++; Linux etc. Start these with unit testing.
- what C# features don't translate well to other languages like C++? is operator?
- neither is nor as are reflection. as is 20x slower though. p. 123
- Join() vs Block() - Join() completely locks up the Dispatcher? Does Block() wait At PushFrame() like a tr affic cop?

- Count property is very slow on Dictionary even though it's an ICollection. List and stack to be trusted?
- Replace First() with FirstOnlyAssert()
- ToEnumerable() in FileDictionary cut 60MB off and did not take any time to make.
- TotalMilliseconds gotcha
- look for 0 ==    > 0 <   == 0   < 0 >  Count property;   etc.
	The Length property is guaranteed to be a O(1) operation.
	several types which support O(1) length lookup like ICollection<T> via a Count property.
- Convert.ToInt32 etc: use Util
- nullables should be type nullable = null; not var nullable = default(type);
- string.IsNullOrWhiteSpace has completely replaced IsNullOrEmpty 7/7/15
- Make the array[] a ReadOnlyCollection using Array.AsReadOnly<T>(T[] array). This method is an O(1) operation.
- check Count usage in loops
- replace .Cast with (ICollection<>)
- replace IEnumerable with ICollection where possible
- replace null member vars like Thread with instances so no need to test for null

Coding purpose:
- Change-managed Windows.Forms.ListView app into WPF app with MVVM DataGrids
- Implemented modal (does not use WinForms ShowDialog)
- Implemented 220 release mode asserts (does not depend on Debug.Assert)
- Optimized memory; DRY; standards; maintainability; speed O(1) where possible
Skills used:
- WinMerge; GitHub; Spy++; JetBrains dotMemory and dotTrace; Visual Studio 2015
- Reactive Extensions; subject-observer
- Weak reference; try-catch; extension methods; closures; C# 4; Linq to objects; generics
- External process (7-zip.exe); Native methods (PInvoke); bit shifting; datum ints; binary search
- Threading; parallel; dispatcher frame
- Interactivity (System.Windows); triggers; behaviors; DRY xaml in styles
Specific code areas:
- UX surrounding compressed project file containing any number of flat directory listings
- Metro UI; consistent page-by-page
- Progress UI
- String table
- Bespoke UX; tree list (vs. tree view); tree map (with tool tip; animation; drill-down hit testing)
- Search with regex; statistics: ANOVA
- Fast long-path large fetch native directory listings
- Fast 1 MB sample faux checksum per file on your drive (512K from head; 512K from tail)
The main purpose of Double File is to allow you to pack up your drive and go: transition from one computer to another; or put a new drive or operating system in. Copy the files you use then let the rest just sit in storage. Drive capacities and speeds are increasing. This drive has nothing better to do than serve as backup; to maintain environment state. Plug it back in and be right where you were when you left it. But wait - what's actually on those drives, and are they backed up? Out of sight, out of mind: that's where Double File comes in. Catalog them, then have them curated for you on your current setup as they sit in storage: safe from transitional hazards. Plan well, then act: reuse the drives after making a plan.

99830 block is reserved: do not alert LocalOnNext. Next: 99837 on down
99675 next low assert
